# This file has been autogenerated by the pywayland scanner

# Copyright © 2019 Christopher Billington
# Copyright © 2020 Ilia Bozhinov
# Copyright © 2022 Victoria Brekenfeld
#
# Permission to use, copy, modify, distribute, and sell this
# software and its documentation for any purpose is hereby granted
# without fee, provided that the above copyright notice appear in
# all copies and that both that copyright notice and this permission
# notice appear in supporting documentation, and that the name of
# the copyright holders not be used in advertising or publicity
# pertaining to distribution of the software without specific,
# written prior permission.  The copyright holders make no
# representations about the suitability of this software for any
# purpose.  It is provided "as is" without express or implied
# warranty.
#
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
# SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
# THIS SOFTWARE.

from __future__ import annotations

import enum

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)

from ..wayland import WlOutput
from .zcosmic_workspace_handle_v1 import ZcosmicWorkspaceHandleV1


class ZcosmicWorkspaceGroupHandleV1(Interface):
    """A workspace group assigned to a set of outputs

    A :class:`ZcosmicWorkspaceGroupHandleV1` object represents a a workspace
    group that is assigned a set of outputs and contains a number of
    workspaces.

    The set of outputs assigned to the workspace group is conveyed to the
    client via output_enter and output_leave events, and its workspaces are
    conveyed with workspace events.

    For example, a compositor which has a set of workspaces for each output may
    advertise a workspace group (and its workspaces) per output, whereas a
    compositor where a workspace spans all outputs may advertise a single
    workspace group for all outputs.
    """

    name = "zcosmic_workspace_group_handle_v1"
    version = 2

    class zcosmic_workspace_group_capabilities_v1(enum.IntEnum):
        create_workspace = 1


class ZcosmicWorkspaceGroupHandleV1Proxy(Proxy[ZcosmicWorkspaceGroupHandleV1]):
    interface = ZcosmicWorkspaceGroupHandleV1

    @ZcosmicWorkspaceGroupHandleV1.request(
        Argument(ArgumentType.String),
    )
    def create_workspace(self, workspace: str) -> None:
        """Create a new workspace

        Request that the compositor create a new workspace with the given name.

        There is no guarantee that the compositor will create a new workspace,
        or that the created workspace will have the provided name.

        :param workspace:
        :type workspace:
            `ArgumentType.String`
        """
        self._marshal(0, workspace)

    @ZcosmicWorkspaceGroupHandleV1.request()
    def destroy(self) -> None:
        """Destroy the :class:`ZcosmicWorkspaceGroupHandleV1` object

        Destroys the :class:`ZcosmicWorkspaceGroupHandleV1` object.

        This request should be called either when the client does not want to
        use the workspace object any more or after the remove event to finalize
        the destruction of the object.
        """
        self._marshal(1)
        self._destroy()


class ZcosmicWorkspaceGroupHandleV1Resource(Resource):
    interface = ZcosmicWorkspaceGroupHandleV1

    @ZcosmicWorkspaceGroupHandleV1.event(
        Argument(ArgumentType.Array),
    )
    def capabilities(self, capabilities: list) -> None:
        """Compositor capabilities

        This event advertises the capabilities supported by the compositor. If
        a capability isn't supported, clients should hide or disable the UI
        elements that expose this functionality. For instance, if the
        compositor doesn't advertise support for creating workspaces, a button
        triggering the create_workspace request should not be displayed.

        The compositor will ignore requests it doesn't support. For instance, a
        compositor which doesn't advertise support for creating workspaces will
        ignore create_workspace requests.

        Compositors must send this event once after creation of an
        :class:`ZcosmicWorkspaceGroupHandleV1` . When the capabilities change,
        compositors must send this event again.

        The capabilities are sent as an array of 32-bit unsigned integers in
        native endianness.

        :param capabilities:
            array of 32-bit capabilities
        :type capabilities:
            `ArgumentType.Array`
        """
        self._post_event(0, capabilities)

    @ZcosmicWorkspaceGroupHandleV1.event(
        Argument(ArgumentType.Object, interface=WlOutput),
    )
    def output_enter(self, output: WlOutput) -> None:
        """Output assigned to workspace group

        This event is emitted whenever an output is assigned to the workspace
        group.

        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        """
        self._post_event(1, output)

    @ZcosmicWorkspaceGroupHandleV1.event(
        Argument(ArgumentType.Object, interface=WlOutput),
    )
    def output_leave(self, output: WlOutput) -> None:
        """Output removed from workspace group

        This event is emitted whenever an output is removed from the workspace
        group.

        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        """
        self._post_event(2, output)

    @ZcosmicWorkspaceGroupHandleV1.event(
        Argument(ArgumentType.NewId, interface=ZcosmicWorkspaceHandleV1),
    )
    def workspace(self, workspace: ZcosmicWorkspaceHandleV1) -> None:
        """Workspace added to workspace group

        This event is emitted whenever a new workspace has been created. A
        workspace can only be a member of a single workspace group and cannot
        be re-assigned.

        All initial details of the workspace (name, coordinates, state) will be
        sent immediately after this event via the corresponding events in
        :class:`~pywayland.protocol.cosmic_workspace_unstable_v1.ZcosmicWorkspaceHandleV1`.

        :param workspace:
        :type workspace:
            :class:`~pywayland.protocol.cosmic_workspace_unstable_v1.ZcosmicWorkspaceHandleV1`
        """
        self._post_event(3, workspace)

    @ZcosmicWorkspaceGroupHandleV1.event()
    def remove(self) -> None:
        """This workspace group has been destroyed

        This event means the :class:`ZcosmicWorkspaceGroupHandleV1` has been
        destroyed. It is guaranteed there won't be any more events for this
        :class:`ZcosmicWorkspaceGroupHandleV1`. The
        zext_workspace_group_handle_v1 becomes inert so any requests will be
        ignored except the destroy request.

        The compositor must remove all workspaces belonging to a workspace
        group before removing the workspace group.
        """
        self._post_event(4)


class ZcosmicWorkspaceGroupHandleV1Global(Global):
    interface = ZcosmicWorkspaceGroupHandleV1


ZcosmicWorkspaceGroupHandleV1._gen_c()
ZcosmicWorkspaceGroupHandleV1.proxy_class = ZcosmicWorkspaceGroupHandleV1Proxy
ZcosmicWorkspaceGroupHandleV1.resource_class = ZcosmicWorkspaceGroupHandleV1Resource
ZcosmicWorkspaceGroupHandleV1.global_class = ZcosmicWorkspaceGroupHandleV1Global
