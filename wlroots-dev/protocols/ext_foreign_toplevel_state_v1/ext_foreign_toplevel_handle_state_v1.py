# This file has been autogenerated by the pywayland scanner

# Copyright © 2018 Ilia Bozhinov
# Copyright © 2020 Isaac Freund
# Copyright © 2022 wb9688
# Copyright © 2023 i509VCB
#
# Permission to use, copy, modify, distribute, and sell this
# software and its documentation for any purpose is hereby granted
# without fee, provided that the above copyright notice appear in
# all copies and that both that copyright notice and this permission
# notice appear in supporting documentation, and that the name of
# the copyright holders not be used in advertising or publicity
# pertaining to distribution of the software without specific,
# written prior permission.  The copyright holders make no
# representations about the suitability of this software for any
# purpose.  It is provided "as is" without express or implied
# warranty.
#
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
# SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
# THIS SOFTWARE.

from __future__ import annotations

import enum

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)

from ..ext_foreign_toplevel_list_v1 import ExtForeignToplevelHandleV1
from ..wayland import WlOutput


class ExtForeignToplevelHandleStateV1(Interface):
    """Toplevel state updates

    This object receives events when the state of a toplevel has changed.

    This object extends the
    :class:`~pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1`
    interface and uses the :func:`ExtForeignToplevelHandleV1.done()
    <pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1.done>`
    event to atomically apply pending state.
    """

    name = "ext_foreign_toplevel_handle_state_v1"
    version = 1

    class error(enum.IntEnum):
        orphaned = 0

    class state(enum.IntEnum):
        maximized = 0
        minimized = 1
        activated = 2
        fullscreen = 3


class ExtForeignToplevelHandleStateV1Proxy(Proxy[ExtForeignToplevelHandleStateV1]):
    interface = ExtForeignToplevelHandleStateV1

    @ExtForeignToplevelHandleStateV1.request()
    def destroy(self) -> None:
        """Destroy the :class:`ExtForeignToplevelHandleStateV1` object

        This request should be used when the client no longer wishes to receive
        updates to the toplevel state or after the closed event has been
        received to allow destruction of the object.

        See
        :class:`~pywayland.protocol.ext_foreign_toplevel_state_v1.ExtForeignToplevelStateV1`
        for more information about destroying this object.
        """
        self._marshal(0)
        self._destroy()


class ExtForeignToplevelHandleStateV1Resource(Resource):
    interface = ExtForeignToplevelHandleStateV1

    @ExtForeignToplevelHandleStateV1.event(
        Argument(ArgumentType.Array),
    )
    def state(self, states: list) -> None:
        """The toplevel state changed

        This event is emitted once on creation of the
        :class:`ExtForeignToplevelHandleStateV1` and again whenever the state
        of the toplevel changes.

        The array contains 32-bit unsigned integers of host endianness that
        must be interpreted as :func:`ExtForeignToplevelHandleStateV1.state()`
        values.

        The configured state must not be applied immediately. See
        :func:`ExtForeignToplevelHandleV1.done()
        <pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1.done>`
        for details.

        :param states:
            array of :func:`ExtForeignToplevelHandleStateV1.state()`
        :type states:
            `ArgumentType.Array`
        """
        self._post_event(0, states)

    @ExtForeignToplevelHandleStateV1.event(
        Argument(ArgumentType.Object, interface=WlOutput),
    )
    def output_enter(self, output: WlOutput) -> None:
        """Toplevel entered an output

        The toplevel has entered the output. Like :func:`WlSurface.enter()
        <pywayland.protocol.wayland.WlSurface.enter>`, the toplevel may overlap
        with zero or more outputs.

        The compositor must only send
        :class:`~pywayland.protocol.wayland.WlOutput` objects which the client
        has bound. The compositor must also send this event for every
        :class:`~pywayland.protocol.wayland.WlOutput` the client has bound.
        Clients can filter out :class:`~pywayland.protocol.wayland.WlOutput`
        objects which do not belong to the same event queue.

        If the :func:`ExtForeignToplevelHandleV1.finished()
        <pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1.finished>`
        event was received, then the compositor must not send this event.

        The configured state must not be applied immediately. See
        :func:`ExtForeignToplevelHandleV1.done()
        <pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1.done>`
        for details.

        :param output:
            the output the toplevel entered
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        """
        self._post_event(1, output)

    @ExtForeignToplevelHandleStateV1.event(
        Argument(ArgumentType.Object, interface=WlOutput),
    )
    def output_leave(self, output: WlOutput) -> None:
        """Toplevel left an output

        The toplevel has left the output. Like :func:`WlSurface.leave()
        <pywayland.protocol.wayland.WlSurface.leave>`, the toplevel may leave
        the output due to movement, resizing or the output is being destroyed.

        The compositor must only send
        :class:`~pywayland.protocol.wayland.WlOutput` objects which the client
        has bound. The compositor must also send this event for every
        :class:`~pywayland.protocol.wayland.WlOutput` the client has bound.
        Clients can filter out :class:`~pywayland.protocol.wayland.WlOutput`
        objects which do not belong to the same event queue.

        If the :func:`ExtForeignToplevelHandleV1.finished()
        <pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1.finished>`
        event was received, then the compositor must not send this event.

        The configured state must not be applied immediately. See
        :func:`ExtForeignToplevelHandleV1.done()
        <pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1.done>`
        for details.

        :param output:
            the output the toplevel left
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        """
        self._post_event(2, output)

    @ExtForeignToplevelHandleStateV1.event(
        Argument(ArgumentType.Object, interface=ExtForeignToplevelHandleV1, nullable=True),
    )
    def parent(self, parent: ExtForeignToplevelHandleV1 | None) -> None:
        """Parent change

        This event is emitted whenever the parent of the toplevel changes. A
        value of NULL means that there is no parent.

        The compositor must only send a
        :class:`~pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1`
        object which was created using the same ext_foreign_toplevel_list
        object as the
        :class:`~pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1`
        object this interface extends. No event is emitted when the parent
        handle is destroyed by the client.

        If the :func:`ExtForeignToplevelHandleV1.finished()
        <pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1.finished>`
        event was received, then the compositor must not send this event.

        The configured state must not be applied immediately. See
        :func:`ExtForeignToplevelHandleV1.done()
        <pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1.done>`
        for details.

        :param parent:
            parent of the toplevel
        :type parent:
            :class:`~pywayland.protocol.ext_foreign_toplevel_list_v1.ExtForeignToplevelHandleV1` or `None`
        """
        self._post_event(3, parent)


class ExtForeignToplevelHandleStateV1Global(Global):
    interface = ExtForeignToplevelHandleStateV1


ExtForeignToplevelHandleStateV1._gen_c()
ExtForeignToplevelHandleStateV1.proxy_class = ExtForeignToplevelHandleStateV1Proxy
ExtForeignToplevelHandleStateV1.resource_class = ExtForeignToplevelHandleStateV1Resource
ExtForeignToplevelHandleStateV1.global_class = ExtForeignToplevelHandleStateV1Global
