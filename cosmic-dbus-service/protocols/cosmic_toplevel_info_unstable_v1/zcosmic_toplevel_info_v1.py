# This file has been autogenerated by the pywayland scanner

# Copyright © 2018 Ilia Bozhinov
# Copyright © 2020 Isaac Freund
# Copytight © 2022 Victoria Brekenfeld
#
# Permission to use, copy, modify, distribute, and sell this
# software and its documentation for any purpose is hereby granted
# without fee, provided that the above copyright notice appear in
# all copies and that both that copyright notice and this permission
# notice appear in supporting documentation, and that the name of
# the copyright holders not be used in advertising or publicity
# pertaining to distribution of the software without specific,
# written prior permission.  The copyright holders make no
# representations about the suitability of this software for any
# purpose.  It is provided "as is" without express or implied
# warranty.
#
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
# SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
# THIS SOFTWARE.

from __future__ import annotations

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)

from .zcosmic_toplevel_handle_v1 import ZcosmicToplevelHandleV1


class ZcosmicToplevelInfoV1(Interface):
    """List toplevels and properties thereof

    The purpose of this protocol is to enable clients such as taskbars or docks
    to access a list of opened applications and basic properties thereof.

    The secondary purpose of this protocol is to provide protocol object
    handles for toplevels which may be used to address said toplevels in other
    protocols (e.g. to target a toplevel for screencopy).

    After a client binds the :class:`ZcosmicToplevelInfoV1`, each opened
    toplevel window will be sent via the toplevel event
    """

    name = "zcosmic_toplevel_info_v1"
    version = 1


class ZcosmicToplevelInfoV1Proxy(Proxy[ZcosmicToplevelInfoV1]):
    interface = ZcosmicToplevelInfoV1

    @ZcosmicToplevelInfoV1.request()
    def stop(self) -> None:
        """Stop sending events

        This request indicates that the client no longer wishes to receive
        events for new toplevels.  However, the compositor may emit further
        toplevel_created events until the finished event is emitted.

        The client must not send any more requests after this one.
        """
        self._marshal(0)


class ZcosmicToplevelInfoV1Resource(Resource):
    interface = ZcosmicToplevelInfoV1

    @ZcosmicToplevelInfoV1.event(
        Argument(ArgumentType.NewId, interface=ZcosmicToplevelHandleV1),
    )
    def toplevel(self, toplevel: ZcosmicToplevelHandleV1) -> None:
        """A toplevel has been created

        This event is emitted whenever a new toplevel window is created. It is
        emitted for all toplevels, regardless of the app that has created them.

        All initial properties of the toplevel (title, app_id, states, etc.)
        will be sent immediately after this event via the corresponding events
        in
        :class:`~pywayland.protocol.cosmic_toplevel_info_unstable_v1.ZcosmicToplevelHandleV1`.

        :param toplevel:
        :type toplevel:
            :class:`~pywayland.protocol.cosmic_toplevel_info_unstable_v1.ZcosmicToplevelHandleV1`
        """
        self._post_event(0, toplevel)

    @ZcosmicToplevelInfoV1.event()
    def finished(self) -> None:
        """The compositor has finished with the toplevel manager

        This event indicates that the compositor is done sending events to the
        :class:`ZcosmicToplevelInfoV1`. The server will destroy the object
        immediately after sending this request, so it will become invalid and
        the client should free any resources associated with it.
        """
        self._post_event(1)


class ZcosmicToplevelInfoV1Global(Global):
    interface = ZcosmicToplevelInfoV1


ZcosmicToplevelInfoV1._gen_c()
ZcosmicToplevelInfoV1.proxy_class = ZcosmicToplevelInfoV1Proxy
ZcosmicToplevelInfoV1.resource_class = ZcosmicToplevelInfoV1Resource
ZcosmicToplevelInfoV1.global_class = ZcosmicToplevelInfoV1Global
