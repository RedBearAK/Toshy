# This file has been autogenerated by the pywayland scanner

# Copyright © 2019 Christopher Billington
# Copyright © 2020 Ilia Bozhinov
# Copyright © 2022 Victoria Brekenfeld
#
# Permission to use, copy, modify, distribute, and sell this
# software and its documentation for any purpose is hereby granted
# without fee, provided that the above copyright notice appear in
# all copies and that both that copyright notice and this permission
# notice appear in supporting documentation, and that the name of
# the copyright holders not be used in advertising or publicity
# pertaining to distribution of the software without specific,
# written prior permission.  The copyright holders make no
# representations about the suitability of this software for any
# purpose.  It is provided "as is" without express or implied
# warranty.
#
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
# SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
# THIS SOFTWARE.

from __future__ import annotations

import enum

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)


class ZcosmicWorkspaceHandleV1(Interface):
    """A workspace handing a group of surfaces

    A :class:`ZcosmicWorkspaceHandleV1` object represents a a workspace that
    handles a group of surfaces.

    Each workspace has a name, conveyed to the client with the name event; a
    list of states, conveyed to the client with the state event; and optionally
    a set of coordinates, conveyed to the client with the coordinates event.
    The client may request that the compositor activate or deactivate the
    workspace.

    Each workspace can belong to only a single workspace group. Depepending on
    the compositor policy, there might be workspaces with the same name in
    different workspace groups, but these workspaces are still separate (e.g.
    one of them might be active while the other is not).
    """

    name = "zcosmic_workspace_handle_v1"
    version = 2

    class state(enum.IntEnum):
        active = 0
        urgent = 1
        hidden = 2

    class zcosmic_workspace_capabilities_v1(enum.IntEnum):
        activate = 1
        deactivate = 2
        remove = 3
        rename = 4
        set_tiling_state = 5

    class tiling_state(enum.IntEnum):
        floating_only = 0
        tiling_enabled = 1


class ZcosmicWorkspaceHandleV1Proxy(Proxy[ZcosmicWorkspaceHandleV1]):
    interface = ZcosmicWorkspaceHandleV1

    @ZcosmicWorkspaceHandleV1.request()
    def destroy(self) -> None:
        """Destroy the :class:`ZcosmicWorkspaceHandleV1` object

        Destroys the :class:`ZcosmicWorkspaceHandleV1` object.

        This request should be called either when the client does not want to
        use the workspace object any more or after the remove event to finalize
        the destruction of the object.
        """
        self._marshal(0)
        self._destroy()

    @ZcosmicWorkspaceHandleV1.request()
    def activate(self) -> None:
        """Activate the workspace

        Request that this workspace be activated.

        There is no guarantee the workspace will be actually activated, and
        behaviour may be compositor-dependent. For example, activating a
        workspace may or may not deactivate all other workspaces in the same
        group.
        """
        self._marshal(1)

    @ZcosmicWorkspaceHandleV1.request()
    def deactivate(self) -> None:
        """Activate the workspace

        Request that this workspace be deactivated.

        There is no guarantee the workspace will be actually deactivated.
        """
        self._marshal(2)

    @ZcosmicWorkspaceHandleV1.request()
    def remove(self) -> None:
        """Remove the workspace

        Request that this workspace be removed.

        There is no guarantee the workspace will be actually removed.
        """
        self._marshal(3)

    @ZcosmicWorkspaceHandleV1.request(
        Argument(ArgumentType.String),
        version=2,
    )
    def rename(self, name: str) -> None:
        """Rename this workspace

        Request that this workspace is renamed.

        There is no guarantee the workspace will actually be renamed.

        :param name:
            new name of the workspace
        :type name:
            `ArgumentType.String`
        """
        self._marshal(4, name)

    @ZcosmicWorkspaceHandleV1.request(
        Argument(ArgumentType.Uint),
        version=2,
    )
    def set_tiling_state(self, state: int) -> None:
        """Change the tiling state of this workspace

        Request that this workspace's tiling state is changed.

        There is no guarantee the workspace will actually change it's tiling
        state.

        :param state:
            the new tiling state of the workspace
        :type state:
            `ArgumentType.Uint`
        """
        self._marshal(5, state)


class ZcosmicWorkspaceHandleV1Resource(Resource):
    interface = ZcosmicWorkspaceHandleV1

    @ZcosmicWorkspaceHandleV1.event(
        Argument(ArgumentType.String),
    )
    def name(self, name: str) -> None:
        """Workspace name changed

        This event is emitted immediately after the
        :class:`ZcosmicWorkspaceHandleV1` is created and whenever the name of
        the workspace changes.

        :param name:
        :type name:
            `ArgumentType.String`
        """
        self._post_event(0, name)

    @ZcosmicWorkspaceHandleV1.event(
        Argument(ArgumentType.Array),
    )
    def coordinates(self, coordinates: list) -> None:
        """Workspace coordinates changed

        This event is used to organize workspaces into an N-dimensional grid
        within a workspace group, and if supported, is emitted immediately
        after the :class:`ZcosmicWorkspaceHandleV1` is created and whenever the
        coordinates of the workspace change. Compositors may not send this
        event if they do not conceptually arrange workspaces in this way. If
        compositors simply number workspaces, without any geometric
        interpretation, they may send 1D coordinates, which clients should not
        interpret as implying any geometry. Sending an empty array means that
        the compositor no longer orders the workspace geometrically.

        Coordinates have an arbitrary number of dimensions N with an uint32
        position along each dimension. By convention if N > 1, the first
        dimension is X, the second Y, the third Z, and so on. The compositor
        may chose to utilize these events for a more novel workspace layout
        convention, however. No guarantee is made about the grid being filled
        or bounded; there may be a workspace at coordinate 1 and another at
        coordinate 1000 and none in between. Within a workspace group, however,
        workspaces must have unique coordinates of equal dimensionality.

        :param coordinates:
        :type coordinates:
            `ArgumentType.Array`
        """
        self._post_event(1, coordinates)

    @ZcosmicWorkspaceHandleV1.event(
        Argument(ArgumentType.Array),
    )
    def state(self, state: list) -> None:
        """The state of the workspace changed

        This event is emitted immediately after the
        :class:`ZcosmicWorkspaceHandleV1` is created and each time the
        workspace state changes, either because of a compositor action or
        because of a request in this protocol.

        :param state:
        :type state:
            `ArgumentType.Array`
        """
        self._post_event(2, state)

    @ZcosmicWorkspaceHandleV1.event(
        Argument(ArgumentType.Array),
    )
    def capabilities(self, capabilities: list) -> None:
        """Compositor capabilities

        This event advertises the capabilities supported by the compositor. If
        a capability isn't supported, clients should hide or disable the UI
        elements that expose this functionality. For instance, if the
        compositor doesn't advertise support for removing workspaces, a button
        triggering the remove request should not be displayed.

        The compositor will ignore requests it doesn't support. For instance, a
        compositor which doesn't advertise support for remove will ignore
        remove requests.

        Compositors must send this event once after creation of an
        :class:`ZcosmicWorkspaceHandleV1` . When the capabilities change,
        compositors must send this event again.

        The capabilities are sent as an array of 32-bit unsigned integers in
        native endianness.

        :param capabilities:
            array of 32-bit capabilities
        :type capabilities:
            `ArgumentType.Array`
        """
        self._post_event(3, capabilities)

    @ZcosmicWorkspaceHandleV1.event()
    def remove(self) -> None:
        """This workspace has been destroyed

        This event means the :class:`ZcosmicWorkspaceHandleV1` has been
        destroyed. It is guaranteed there won't be any more events for this
        :class:`ZcosmicWorkspaceHandleV1`. The zext_workspace_handle_v1 becomes
        inert so any requests will be ignored except the destroy request.
        """
        self._post_event(4)

    @ZcosmicWorkspaceHandleV1.event(
        Argument(ArgumentType.Uint),
        version=2,
    )
    def tiling_state(self, state: int) -> None:
        """Indicates if tiling behavior is enabled for this workspace

        This event is emitted immediately after the
        :class:`ZcosmicWorkspaceHandleV1` is created and each time the
        workspace tiling state changes, either because of a compositor action
        or because of a request in this protocol.

        :param state:
        :type state:
            `ArgumentType.Uint`
        """
        self._post_event(5, state)


class ZcosmicWorkspaceHandleV1Global(Global):
    interface = ZcosmicWorkspaceHandleV1


ZcosmicWorkspaceHandleV1._gen_c()
ZcosmicWorkspaceHandleV1.proxy_class = ZcosmicWorkspaceHandleV1Proxy
ZcosmicWorkspaceHandleV1.resource_class = ZcosmicWorkspaceHandleV1Resource
ZcosmicWorkspaceHandleV1.global_class = ZcosmicWorkspaceHandleV1Global
